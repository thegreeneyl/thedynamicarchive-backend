<?php

/**
 * @file
 * Contains rest_password.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Crypt;

/**
 * Implements hook_form_alter().
 */
function rest_password_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'restui' && !empty($form['resource_id']['#value']) && $form['resource_id']['#value'] === 'lost_password_resource') {
    unset($form['wrapper']['settings']['authentication']['#options']);
    $form['wrapper']['settings']['authentication']['#options'] = ['Na' => 'Na - please check this as rest ui will cry'];
    $form['Extra'] = [
      '#markup' => t('<h2>How to Use:</h2> <p>Post "mail" to endpoint. optional add "lang" for language of email.</p> <p>Also When You save this please clear all your drupal cache</p>'),
    ];
    $form['Extra1'] = [
      '#markup' => t('<p>The User will get an email form admin account settings ... you then need to post this (with name) to "/user/login?_format=json" to login but you will need to set new password. so auth can work. see "Reset Lost password Via Temp password" </p>'),
    ];
  }

  if ($form_id === 'restui' && !empty($form['resource_id']['#value']) && $form['resource_id']['#value'] === 'lost_password_reset') {
    unset($form['wrapper']['settings']['authentication']['#options']);
    $form['wrapper']['settings']['authentication']['#options'] = ['Na' => 'Na - please check this as rest ui will cry'];
    $form['Extra'] = [
      '#markup' => t('Once You have gotten your temp password (via email) you can then post {"name":"USERNAME", "temp_pass":"THETEMPPASS", "new_pass": "NEWPASSWORD"} to this endpoint to change the users password, then we recommend re login'),
    ];
  }

  if ($form_id === 'user_admin_settings') {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('user.mail');
    $check = $config->get('password_reset_rest');
    if (!empty($check)) {
      // dump($form);
      $form['password_reset_rest'] = [
        '#type' => 'details',
        '#title' => t('Rest Password recovery'),
        '#description' => t('Edit the email messages sent to users who request a new password vai Rest endpoint.'),
        '#group' => 'email',
        '#weight' => 10,
      ];
      $form['password_reset_rest']['user_mail_password_reset_rest_subject'] = [
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => $config->get('password_reset_rest.subject'),
        '#maxlength' => 180,
      ];
      $form['password_reset_rest']['user_mail_password_reset_rest_body'] = [
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $config->get('password_reset_rest.body'),
        '#rows' => 12,
        '#description' => t("Custom Tokens that only only work with this Email:<br/>Temp password: [user:rest-temp-password] <br/> Url-encode Name: [user:name-url-encode] <br/> Url-encode Name2: [user:name-url-encode-spaces]"),
      ];
      $form['#submit'][] = 'rest_password_user_settings_form_submit';
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function rest_password_user_settings_form_submit(array &$form, FormStateInterface $form_state) {
  // Save configs.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('user.mail');
  $config->set('password_reset_rest.body', $form_state->getValue('user_mail_password_reset_rest_body'));
  $config->set('password_reset_rest.subject', $form_state->getValue('user_mail_password_reset_rest_subject'));
  $config->save(TRUE);
}

/**
 * Implements hook_mail().
 */
function rest_password_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = ['user' => $params['account']];

  $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('user.mail');
  $token_options = [
    'langcode' => $langcode,
    'callback' => 'rest_password_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);
  $language_manager->setConfigOverrideLanguage($original_language);
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by \Drupal\Core\Utility\Token::replace() to set up
 * some additional tokens that can be used in email messages generated by
 * user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param array $options
 *   A keyed array of settings and flags to control the token replacement
 *   process. See \Drupal\Core\Utility\Token::replace().
 */
function rest_password_mail_tokens(array &$replacements, array $data, array $options) {
  if (isset($data['user'])) {
    $replacements['[user:one-time-login-url]'] = user_pass_reset_url($data['user'], $options);
    $replacements['[user:cancel-url]'] = user_cancel_url($data['user'], $options);
    $replacements['[user:rest-temp-password]'] = rest_password_temp_pass_token($data['user'], $options);
    $replacements['[user:name-url-encode]'] = rest_password_fix_name_url_encode($data['user'], $options);
    $replacements['[user:name-url-encode-spaces]'] = rest_password_fix_name_url_encode_sapace($data['user'], $options);
  }
}

/**
 * Generates a temp password to log in and reset their password.
 *
 * @param \Drupal\user\UserInterface $account
 *   An object containing the user account.
 * @param array $options
 *   (optional) A keyed array of settings. Supported options are:
 *   - langcode: A language code to be used when generating locale-sensitive
 *    URLs. If langcode is NULL the users preferred language is used.
 *
 * @return string
 *   A unique temp password for the user, from which
 *   they can change their password.
 */
function rest_password_temp_pass_token(\Drupal\user\UserInterface $account, array $options = []) {
  $timestamp = time();
  $langcode = isset($options['langcode']) ? $options['langcode'] : $account->getPreferredLangcode();
  // OK now lets make a random password.
  $random_string = Crypt::randomBytesBase64(10);
  
  // Create a temp store.
  $service = \Drupal::service('tempstore.shared');
  $collection = 'rest_password';
  // Yep use "get" to set it up.
  $tempstore = $service->get($collection, $account->id());
  $tempstore->set('temp_pass', $random_string);
  return $random_string;
}

/**
 * Token call back for [user:name-url-encode].
 *
 * @param \Drupal\user\UserInterface $account
 *   An object containing the user account.
 * @param array $options
 *   (optional) A keyed array of settings. Supported options are:
 *   - langcode: A language code to be used when generating locale-sensitive
 *    URLs. If langcode is NULL the users preferred language is used.
 *
 * @return string
 *   A unique temp password for the user, from which
 *   they can change their password.
 */
function rest_password_fix_name_url_encode(\Drupal\user\UserInterface $account, array $options = []) {
  $name = $account->getAccountName();
  return urlencode($name);
}

/**
 * Token call back for [user:name-url-encode-spaces].
 *
 * @param \Drupal\user\UserInterface $account
 *   An object containing the user account.
 * @param array $options
 *   (optional) A keyed array of settings. Supported options are:
 *   - langcode: A language code to be used when generating locale-sensitive
 *    URLs. If langcode is NULL the users preferred language is used.
 *
 * @return string
 *   A unique temp password for the user, from which
 *   they can change their password.
 */
function rest_password_fix_name_url_encode_sapace(\Drupal\user\UserInterface $account, array $options = []) {
  $name = $account->getAccountName();
  return str_replace(' ', '%20', $name);
}

/**
 * Acts like user mail tokens.
 *
 * See user_mail_tokens() & _user_mail_notify.
 */
function _rest_password_user_mail_notify($op, $account, $langcode = NULL) {
  if ($op === 'password_reset_rest') {
    if (\Drupal::config('user.settings')->get('notify.' . $op)) {
      $params['account'] = $account;
      $langcode = $langcode ? $langcode : $account->getPreferredLangcode();
      // Get the custom site notification email to use as the from email address
      // if it has been set.
      $site_mail = \Drupal::config('system.site')->get('mail_notification');
      // If the custom site notification email has not been set, we use the site
      // default for this.
      if (empty($site_mail)) {
        $site_mail = \Drupal::config('system.site')->get('mail');
      }
      if (empty($site_mail)) {
        $site_mail = ini_get('sendmail_from');
      }
      $mail = \Drupal::service('plugin.manager.mail')->mail('rest_password', $op, $account->getEmail(), $langcode, $params, $site_mail);
    }
    return empty($mail) ? NULL : $mail['result'];
  }
  else {
    if (empty($langcode)) {
      $langcode = NULL;
    }
    // Just do the normal things ..nothing to see here;.
    return _user_mail_notify($op, $account, $langcode);
  }
}
