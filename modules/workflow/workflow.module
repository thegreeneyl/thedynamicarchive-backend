<?php

/**
 * @file
 * Examples demonstrating how to implement and invoke hooks.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\group\Entity;
use Drupal\node\Entity\Node;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupContentType;
use Drupal\file\Entity\File;

use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * @defgroup workflow Example: Hooks
 * @ingroup examples
 * @{
 * Demonstrates implementing, defining, and invoking hooks.
 *
 * Knowing how to implement, define, and invoke hooks is a critical concept for
 * any Drupal developer.
 *
 * Hooks are specially named functions called at key points in order to allow
 * other code to alter, extend, and enhance the behavior of Drupal core, or
 * another module. Without requiring changes to the original code.
 *
 * Every hook has three parts; a name, an implementation, and a definition.
 *
 * Hooks are implemented by following the function naming convention and
 * reviewing the documentation associated with a hook to discover parameters and
 * their expected values. Learn how to implement hooks by reviewing
 * workflow_help(), workflow_node_view(), and
 * workflow_form_alter() below.
 *
 * Because the list of hook implementations is cached you'll need to clear the
 * cache when first adding a new hook implementation.
 *
 * Hooks are defined by creating a new, unique, hook name, providing
 * documentation for the hook in an {MODULE_NAME}.api.php file, and using either
 * \Drupal\Core\Extension\ModuleHandlerInterface::invokeAll(),
 * \Drupal\Core\Extension\ModuleHandlerInterface::invoke(), or
 * \Drupal\Core\Extension\ModuleHandlerInterface::alter() via the
 * 'module_handler' service to call implementations of a hook in all enabled
 * modules. Learn how to define, and invoke a new hook by reviewing
 * workflow_node_view().
 *
 * Learn how to document a hook by reviewing workflow.api.php.
 *
 * @link https://www.drupal.org/docs/8/creating-custom-modules/understanding-hooks
 * Understanding hooks @endlink
 *
 * In order to see this example module in action you should create one or more
 * nodes on your site. Then visit those nodes and look for the view counter
 * added by this module. In addition, look for the special message displayed at
 * the top of a node the first time you view it.
 *
 * @see hooks
 * @see \Drupal\Core\Extension\ModuleHandlerInterface
 */

/**
 * Implements hook_help().
 *
 * When implementing a hook you should use the standard text "Implements
 * HOOK_NAME." as the docblock for the function. This is an indicator that
 * further documentation for the function parameters can be found in the
 * docblock for hook being implemented and reduces duplication.
 *
 * This function is an implementation of hook_help(). Following the naming
 * convention for hooks, the "hook_" in hook_help() has been replaced with the
 * short name of our module, "workflow_" resulting in a final function name
 * of workflow_help().
 */
function workflow_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // For help overview pages we use the route help.page.$moduleName.
    case 'help.page.workflow':
      return '<p>' . t('This text is provided by the function <code>workflow_help()</code>, which is an implementation of <code>hook hook_help()</code>. To learn more about how this works checkout the code in <code>workflow.module</code>.') . '</p>';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Some hook names include additional tokens that need to be replaced when
 * implementing the hook. These hooks are dynamic in that when they are being
 * invoked a portion of their name is replaced with a dynamic value. This is
 * indicated by placing the token words in all caps. This pattern is often used
 * in situations where you want to allow modules to generically act on all
 * instances of a thing, or to act on only a specific subset.
 *
 * There are lots of different entity types in Drupal. Node, user, file, etc.
 * Using hook_entity_view() a module can act on a any entity that is being
 * viewed, regardless of type. If we wanted to count views of all entities,
 * regardless of type this would be a good choice. This variant is also useful
 * if you want to provide administrators with a form where they can choose from
 * a list of entity types which ones they want to count views for. The logic in
 * the generic hook implementation could then take that into account and act on
 * only a select set of entity types.
 *
 * If however, you know you only ever want to act on viewing of a node entity
 * you can instead implement hook_ENTITY_TYPE_view(). Where ENTITY_TYPE is a
 * token that can be replaced with any valid entity type name.
 *
 * @see hook_entity_view()
 * @see hook_ENTITY_TYPE_view()
 */
function workflow_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
}

/**
 * Implements hook_form_alter().
 */
function workflow_form_node_embed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // This is an example of what is known as an alter hook. The $form paremater
  // in this case represents an already complete Form API array and our hook
  // implementation is being given the opportunity to make changes to the
  // existing data structure before it's used. Inovking and alter hooks is a
  // common pattern anytime lists or complex data structures are assembled.
  // hook_form_alter(), which allows you to manipulate any form, is one of the
  // most commonly implemented hooks.
  //
  // @see hook_form_alter()
  // @see hook_form_FORM_ID_alter()
  //
  // If this is the user login form, change the description text of the username
  // field.
  /*
  
  if ($form_id === 'user_login_form') {
    $form['name']['#description'] = t('This text has been altered by workflow_form_alter().');
  }*/
  //\Drupal::logger('workflow')->notice("Workflow Form Alter");

}

function workflow_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // This is an example of what is known as an alter hook. The $form paremater
  // in this case represents an already complete Form API array and our hook
  // implementation is being given the opportunity to make changes to the
  // existing data structure before it's used. Inovking and alter hooks is a
  // common pattern anytime lists or complex data structures are assembled.
  // hook_form_alter(), which allows you to manipulate any form, is one of the
  // most commonly implemented hooks.
  //
  // @see hook_form_alter()
  // @see hook_form_FORM_ID_alter()
  //
  // If this is the user login form, change the description text of the username
  // field.
  /*
  
  if ($form_id === 'user_login_form') {
    $form['name']['#description'] = t('This text has been altered by workflow_form_alter().');
  }*/
  //  dpm($form['field_group']);
  /*
  if (array_key_exists('field_group', $form)) {
    if (empty($form['field_group']['widget']['#default_value'])) {
      $target = $form['field_group']['widget']['#options'];
               // move the internal pointer to the end of the array
      reset($target);
      $key = key($target);
      //if ($key == '_none') array_shift($form['field_group']['widget']['#options']);

      $key = count($form['field_group']['widget']['#options']) - 1;  // fetches the key of the element pointed to by the internal pointer

      //$form['field_group']['widget']['#default_value'][] = $key;
    }
    dpm($form['field_group']);
  }
  */
  
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'workflow_node_form_submit';
    }
  }
}

function workflow_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  \Drupal::logger('workflow')
    ->info('Submit Node: @label, of @bundle', [
    '@label' => $node->getEntityTypeId(),
    '@bundle' => $node->bundle(),
  ]);

  if ($node->id()) {
    $nids = array();
    foreach (GroupContent::loadByEntity($node) as $group_content) {
      $nids[] = $group_content->getGroup()->id();
    }
    if (count($nids)) $form_state->setRedirect('entity.group.canonical', array('group' => $nids[0]));
    /*
    dpm($nids);
    if ($node->access('edit')) {
      //dpm($form_state);
      $form_state->setRedirect(
        'entity.node.edit_form',
        ['node' => $node->id()]
      );
    }
    else {
      $form_state->setRedirect('/group/2');
    }
    */
  }
}

function workflow_taxonomy_term_update($entity) {
  /*
  \Drupal::logger('workflow')
    ->info('Update taxonomy term: @label, of @bundle', [
    '@label' => $entity->getEntityTypeId(),
    '@bundle' => $entity->bundle(),
  ]);
  */
  //workflow_entity_update($entity);
}

function workflow_taxonomy_term_insert($entity) {
  
  if ($entity->bundle() == "group") {

    $groupID = intval($entity->get('field_component')->getString());
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', "group");
    $query->condition('field_component', $groupID);
    $query->sort('weight','DESC');
    $query->range(0,1);
    $terms = $query->execute();
    //$value = "";
    if (count($terms)) foreach ($terms as $tid => $t) {
      $term = Term::load($tid);
      //$value .= " ".$term->get('weight')->getString();
      $entity->set('weight', intval($term->get('weight')->getString()) + 1);
    }

    \Drupal::logger('workflow')
      ->info('Insert @bundle: component @component, weight @weight', [
      '@bundle' => $entity->bundle(),
      '@weight' => $entity->get('weight')->getString(),
      '@component' => $groupID,
    ]);

    drupal_register_shutdown_function('_cc_custom_post_insert',$entity);
  }
}

function _cc_custom_post_insert($entity) {
    if($entity) {
        $entity->save();
    }
}

function workflow_entity_update($entity) {
  //dpm($entity);

  if ($entity->getEntityTypeId() == "group") {
    views_invalidate_cache();
      \Drupal::logger('workflow')
      ->info('Views Cache Cleared on update: @label, of @bundle', [
      '@label' => $entity->getEntityTypeId(),
      '@bundle' => $entity->bundle(),
    ]);
  }
  if ($entity->getEntityTypeId() != "node" && $entity->getEntityTypeId() != "taxonomy_term") return;

  \Drupal::logger('workflow')
    ->info('Update entity: @label, of @bundle', [
    '@label' => $entity->getEntityTypeId(),
    '@bundle' => $entity->bundle(),
  ]);

  $group_id = 0;

  if ($entity->hasField('field_component') && intval($entity->get('field_component')->getString()) > 0) {
    $group_id = intval($entity->get('field_component')->getString());
  } else if ($entity->id()) {
    foreach (GroupContent::loadByEntity($entity) as $group_content) {
      $group_id = $group_content->getGroup()->id();
    }
  }

  if (is_numeric($group_id) && $group_id > 0) {
    $group = Group::load($group_id);

    $group->changed = REQUEST_TIME;
    $group->save();
  } else {
    views_invalidate_cache();
      \Drupal::logger('workflow')
      ->info('Views Cache Cleared on update: @label, of @bundle', [
      '@label' => $entity->getEntityTypeId(),
      '@bundle' => $entity->bundle(),
    ]);
  }
}

function workflow_entity_delete($entity) {
  //dpm($entity);
  /*
    views_invalidate_cache();
    \Drupal::logger('workflow')
    ->info('Views Cache Cleared on delete');
    */
}

function workflow_node_insert($node) {
    \Drupal::logger('workflow')
    ->info('Insert node: @label', [
    '@label' => $node
      ->label(),
  ]);

  if ($node->hasField('field_component')) {
    $group_id = intval($node->get('field_component')->getString());

    //$node = Node::load($node_id);
    $bundle = $node->bundle();
    $plugin_id = 'group_node:' . $bundle;
    
    if (is_numeric($group_id)) $group = Group::load($group_id);
    if ($group != null) {
      $group->addContent($node,$plugin_id);

      \Drupal::logger('workflow')
        ->info('added Node “@node” to component “@group”', [
        '@node' => $node->label(),
        '@group' => $group->label()
      ]);
    }
    if (!intval($node->get('field_original_node')->getString())) {
      moveFile($node, 'field_image', $bundle);
      moveFile($node, 'field_file', $bundle);
      moveFile($node, 'field_video', $bundle);
      moveFile($node, 'field_audio', $bundle);
    }
  }

}


function moveFile($node, $filefield, $bundle) {
  if ($node->hasField($filefield) && $node->hasField('field_component')) {
    $group_id = intval($node->get('field_component')->getString());
    $fid = intval($node->get($filefield)->getString());

    if (is_numeric($group_id) && is_numeric($fid)) {
      $file = File::load($fid);
      if ($file != null) {
        $filename = $file->get('filename')->value;
        $path = file_default_scheme() . "://component/".$group_id."/".$bundle."s/".$filename;
        $path = file_stream_wrapper_uri_normalize($path);
        file_move($file, $path);
        \Drupal::logger('workflow')
          ->info('moved file “@file” to “@path', [
          '@file' => $filename,
          '@path' => $path
        ]);
      }
    }
  }
}


function workflow_group_insert($entity) {
  //dpm($entity);
  //  views_invalidate_cache();
  \Drupal::logger('workflow')
    ->info('Insert component: @label', [
    '@label' => $entity
      ->label(),
  ]);


  $term = Term::create([
   'name' => $entity->label(),
   'vid' => 'group',
   'field_component' => array($entity->id())
  ]);

  $term->save();
}


function workflow_group_presave($entity) {
  //dpm($entity);
  //  views_invalidate_cache();
  \Drupal::logger('workflow')
    ->info('Presave component: @label', [
    '@label' => $entity
      ->label(),
  ]);
  
  if (isset($entity->changed)) $entity->changed = REQUEST_TIME;

  $summary = $entity->label();
  if (isset($entity->field_subtitle)) $summary .= "\n" . $entity->field_subtitle->value;
  if (isset($entity->field_description)) $summary .= "\n" . $entity->field_description->value;
  if (isset($entity->field_categories)) foreach ($entity->field_categories as $item) $summary .= "\n" . $item->entity->label();
  if (isset($entity->field_context)) foreach ($entity->field_context as $item) $summary .= "\n" . $item->entity->label();
  if (isset($entity->field_feature_event)) foreach ($entity->field_feature_event as $item) $summary .= "\n" . $item->entity->label();

  if (!$entity->isNew()) {
    $members = $entity->getMembers();
    foreach ($members as $item) $summary .= "\n" . $item->getUser()->field_display_name->value;
  }

  if (!$entity->isNew()) {
    $terms = workflowGetTermsByGroupIds($entity->id());
    foreach ($terms as $term) {
      $summary .= "\n" . $term->label();
      $nodes = workflowGetNodesByTaxonomyTermIds($term->id());
      if (is_array($nodes) && count($nodes)) foreach ($nodes as $node) {
        if (isset($node->field_caption)) $summary .= "\n" . $node->field_caption->value;
        if (isset($node->body)) $summary .= "\n" . $node->body->value;
        if (isset($entity->field_tags)) foreach ($entity->field_tags as $item) $summary .= "\n" . $item->entity->label();
      }
    }
  }

  $entity->field_search->value = $summary;

}

function workflow_group_delete($entity) {
  \Drupal::logger('workflow')
    ->info('Delete component: @label', [
    '@label' => $entity
      ->label(),
  ]);
  
  $t = 0;
  $n = 0;

  $terms = workflowGetTermsByGroupIds($entity->id());
  foreach ($terms as $term) {
    $nodes = workflowGetNodesByTaxonomyTermIds($term->id());
    if (is_array($nodes) && count($nodes)) foreach ($nodes as $node) {
      $node->delete();
      $n ++;
    }
    $term->delete();
    $t ++;
  }

  \Drupal::logger('workflow')
    ->info('Deleted @terms Groups and @nodes Nodes', [
    '@terms' => $t,
    '@nodes' => $n,
  ]);
}

function workflow_views_data_alter(&$data) {

  $data['group_content_field_data']['group_content_uid'] = [
    'title' => t('User is Group-Member.'),
    'help' => t('Filters out if the current user is group member.'),
    'filter' => [
      'field' => 'uid',
      'id' => 'workflow_group_content_uid',
      'label' => t('User is Group-Member'),
    ],
  ];

  $data['group__field_feature_event']['sort_if_sticky'] = array(
    'title' => t('Feature Event if Sticky'),
    'group' => t('Group'),
    'help' => t('Sort by Feture Event if that is marked as Sticky.'),
    'sort' => array(
      'field' => 'field_feature_event_value',
      'id' => 'sort_if_sticky',
    ),
  );
}

function workflow_views_data() {

    $data['views']['table']['group'] = t('Custom Global');
    $data['views']['table']['join'] = [
      // #global is a special flag which allows a table to appear all the time.
      '#global' => [],
    ];


    $data['views']['workflow_name'] = [
        'title' => t('Special Term Name'),
        'help' => t('Displays Special Term Name for Page-Reference'),
        'field' => [
            'id' => 'workflow_name',
        ],
    ];

    return $data;
}


function workflowGetNodesByTaxonomyTermIds($termIds){
  $termIds = (array) $termIds;
  if(empty($termIds)){
    return NULL;
  }

  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $termIds, 'IN');
  $query->condition('ti.status', 1, '=');
  $query->orderBy('ti.weight', 'DESC');
  $query->orderBy('ti.created', 'ASC');

  //$query->distinct(TRUE);
  $result = $query->execute();

  if($nodeIds = $result->fetchCol()){
    return Node::loadMultiple($nodeIds);
  }

  return NULL;
}

function workflowGetTermsByGroupIds($grouId){
  if(empty($grouId)){
    return NULL;
  }

  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', "group");
  $query->condition('field_component', $grouId);
  $query->condition('status', 1, '=');
  $query->sort('weight','ASC');
  $query->sort('tid', 'ASC');

  $tids = $query->execute();

  $terms = Term::loadMultiple($tids);
  return $terms;
}

function workflowAddMembersToGroup($groupId) {
  $account = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $group = \Drupal\group\Entity\Group::load($groupId);
  $group->addMember($account);
  $group->save();
}

/**
 * Implements hook_workflow_count_incremented().
 *
 * Hooks can be implemented by both the module that invokes them like we are
 * doing here, as well as by any other enabled module.
 */
/*
function workflow_workflow_count_incremented($current_count, NodeInterface $node) {
  if ($current_count === 1) {
    \Drupal::messenger()->addMessage(t('This is the first time you have viewed the node %title.', ['%title' => $node->label()]));
  }
}
*/
/**
 * @} End of "defgroup workflow".
 */
